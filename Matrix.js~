function Matrix(row,col,init)
{
this.row = row;
this.col = col;
this.init = init;
multiArray = new Array(this.row);
for(var i=0;i<this.row;i++)
{
    multiArray[i]=new Array(this.col);
}
for(var j = 0;j<this.row;j++)
{ 
    for(var z = 0;z<this.col;z++)
    {
        multiArray[j][z] = this.init;
    }
}

Matrix.prototype.sumMatrix = function(matrix){
   
    if (this.row == matrix.row && this.col == matrix.col)
        {  
            resultMatrix = new Matrix(this.row,this.col,0);

            for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= this[i][j]+matrix[i][j];
                }
            }
            return resultMatrix;
        }
};

Matrix.prototype.diffMatrix = function(matrix){

     if (this.row == matrix.row && this.col == matrix.col)
        { 
            resultMatrix = new Matrix(this.row,this.col,0);

            for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= this[i][j]-matrix[i][j];
                }
            }
            return resultMatrix;
        }
};

Matrix.prototype.moltMatrix = function(matrix){
    if (this.col == matrix.row)
        {
            resultMatrix = new Matrix(this.row,matrix.col);
            for (var i = 0;i<this.row;i++){
                for(var j=0;j<matrix.col;j++){
                 for(var z = 0;z<this.col;z++)
                 
                {
                    resultMatrix[i][j]=+this[i][z]*matrix[z][j];
                }
            
            }
            }

            return resultMatrix;
        }


};

Matrix.prototype.moltMatrixScal = function(number){

   resultMatrix = new Matrix(this.col,this.row,0);
   matrix = new Matrix(this);
   
 for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= matrix[i][j]*number;
                }
            }
        
return resultMatrix;


};


Matrix.prototype.divMatrix = function(number){

   resultMatrix = new Matrix(this.col,this.row,0);

   
 for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= this[i][j]/number;
                }
            }
        return resultMatrix;



};

Matrix.prototype.trasp = function(){

    resultMatrix = new Matrix(this.col,this.row,0);

    for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= this[j][i];
                }
            }
            return resultMatrix;
};

Matrix.prototype.log = function() {

    resultMatrix = new Matrix(this.row,this.col,0);

            for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= Math.log(this[i][j]);
                }
            }
            return resultMatrix;
};

Matrix.prototype.esp = function() {

            resultMatrix = new Matrix(this.row,this.col,0);

            for(var i = 0; i<this.row; i++)
            {
                for(var j = 0;j<this.col;j++)
                {
                 resultMatrix[i][j]= Math.exp(this[i][j]);
                }
            }
            return resultMatrix;
};

}

module.exports.Matrix = Matrix;
